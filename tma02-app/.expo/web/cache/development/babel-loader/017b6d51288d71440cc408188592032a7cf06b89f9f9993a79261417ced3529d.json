{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _getMatches, _postOrders, _deleteOrders;\nvar apibase = \"https://ocl-jhub-tm352.open.ac.uk/user/2/proxy/3000/openstack/taxi/\";\nexport function getMatches(_x) {\n  return (_getMatches = _getMatches || _asyncToGenerator(function* (userid) {\n    var response = yield fetch(apibase + \"matches/?userid=\" + userid);\n    if (!response.ok) {\n      var message = \"An error has occured: \" + response.status;\n      throw message;\n    }\n    var json = yield response.json();\n    return checkResponse(json);\n  })).apply(this, arguments);\n}\nexport function postOrders(_x2, _x3, _x4, _x5, _x6) {\n  return (_postOrders = _postOrders || _asyncToGenerator(function* (userid, start, end, type, address) {\n    var details = {\n      \"userid\": userid,\n      \"start\": start,\n      \"end\": end,\n      \"type\": type,\n      \"address\": address\n    };\n    var response = yield fetch(apibase + \"orders\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(details)\n    });\n    if (!response.ok) {\n      var message = \"An error has occured\" + response.status;\n      throw message;\n    }\n    var json = yield response.json();\n    return checkResponse(json)[0];\n  })).apply(this, arguments);\n}\nexport function deleteOrders(_x7, _x8) {\n  return (_deleteOrders = _deleteOrders || _asyncToGenerator(function* (userid, orderid) {\n    var response = yield fetch(apibase + \"orders/\" + orderid + \"?userid=\" + userid, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      var message = \"An error has occured\" + response.status;\n      throw message;\n    }\n    var json = yield response.json();\n    return checkResponse(json);\n  })).apply(this, arguments);\n}\nfunction checkResponse(response) {\n  if (response.status != \"success\") {\n    throw response.message;\n  } else if (response.data) {\n    return response.data;\n  } else {\n    return response;\n  }\n}","map":{"version":3,"names":["apibase","getMatches","_x","_getMatches","_asyncToGenerator","userid","response","fetch","ok","message","status","json","checkResponse","apply","arguments","postOrders","_x2","_x3","_x4","_x5","_x6","_postOrders","start","end","type","address","details","method","headers","body","JSON","stringify","deleteOrders","_x7","_x8","_deleteOrders","orderid","data"],"sources":["/home/ou/TM352-23J/tma02/tma02-app/libraries/TaxiService.ts"],"sourcesContent":["/**\n * TM352 23J TMA02 Q1, code\n *\n * 24/10/2023 Intial version Chris Thomson\n * 04/12/2023 Fixed server address Chris Thomson\n * \n * This is the code to connect to the taxi service API provided seprately.\n * \n **/\n\n// Modify the following line to replace USERID with your userid.\n// To find the USERID, click on Open in new Tab at the top of the screen and then look at the URL \n// in the new browser tab. You will see that it contains the text /user/USERID/. Use that number \n// in the configuration file and you are ready to go.\nconst apibase = \"https://ocl-jhub-tm352.open.ac.uk/user/2/proxy/3000/openstack/taxi/\";\n\n/**\n * Retrieves matches from the service\n *\n * @param userid the userid of the user\n * @return a list of matches\n */\nexport async function getMatches(userid:string):Promise<any> {\n  const response = await fetch(apibase+\"matches/?userid=\"+userid);\n  if (!response.ok) {\n    const message = \"An error has occured: \"+response.status;\n    throw(message);\n  }\n  const json = await response.json();\n  return checkResponse(json); \n}\n\n/**\n * Posts an order to the service \n *\n * @param userid  the userid of the user\n * @param start   the start of a window to match in formated as a datetime-local\n * @param end     the end of a window to match in formated as a datetime-local\n * @return a list of matches\n */\nexport async function postOrders(userid:string, start:string, end:string, type:string, address:string):Promise<any>  {\n  const details = {\n      \"userid\": userid,\n      \"start\": start,\n      \"end\": end,\n      \"type\": type,\n      \"address\": address\n  };\n\n  const response = await fetch(apibase+\"orders\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(details) \n  });\n\n  if (!response.ok) {\n    const message = \"An error has occured\"+ response.status;\n    throw(message);\n  }\n  const json = await response.json();\n  return checkResponse(json)[0]; \n}\n\n/**\n * Deletes an order from the service\n *\n * @param userid  the userid of the user\n * @param orderid the orderid to delete\n * @return a status\n */\nexport async function deleteOrders(userid:string,orderid:string):Promise<any> {\n  const response = await fetch(apibase+\"orders/\"+orderid+\"?userid=\"+userid, {\n    method: 'DELETE'\n  });\n\n  if (!response.ok) {\n    const message = \"An error has occured\"+ response.status;\n    throw(message);\n  }\n  const json = await response.json();\n  return checkResponse(json); \n}\n\n/**\n * Checks the JSON response for errors and handles them\n *\n * @param  response  the JSON object recived from the service\n * @return processes response\n */\nfunction checkResponse(response:any):any {\n  if (response.status!=\"success\") {\n    throw(response.message);\n  }\n  else if (response.data) {\n    return response.data;\n  }\n  else {\n    return response;\n  }\n}"],"mappings":";;AAcA,IAAMA,OAAO,GAAG,qEAAqE;AAQrF,gBAAsBC,UAAUA,CAAAC,EAAA;EAAA,QAAAC,WAAA,GAAAA,WAAA,IAAAC,iBAAA,CAAzB,WAA0BC,MAAa,EAAe;IAC3D,IAAMC,QAAQ,SAASC,KAAK,CAACP,OAAO,GAAC,kBAAkB,GAACK,MAAM,CAAC;IAC/D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,IAAMC,OAAO,GAAG,wBAAwB,GAACH,QAAQ,CAACI,MAAM;MACxD,MAAMD,OAAO;IACf;IACA,IAAME,IAAI,SAASL,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOC,aAAa,CAACD,IAAI,CAAC;EAC5B,CAAC,GAAAE,KAAA,OAAAC,SAAA;AAAA;AAUD,gBAAsBC,UAAUA,CAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,QAAAC,WAAA,GAAAA,WAAA,IAAAjB,iBAAA,CAAzB,WAA0BC,MAAa,EAAEiB,KAAY,EAAEC,GAAU,EAAEC,IAAW,EAAEC,OAAc,EAAgB;IACnH,IAAMC,OAAO,GAAG;MACZ,QAAQ,EAAErB,MAAM;MAChB,OAAO,EAAEiB,KAAK;MACd,KAAK,EAAEC,GAAG;MACV,MAAM,EAAEC,IAAI;MACZ,SAAS,EAAEC;IACf,CAAC;IAED,IAAMnB,QAAQ,SAASC,KAAK,CAACP,OAAO,GAAC,QAAQ,EAAE;MAC7C2B,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACpB,QAAQ,CAACE,EAAE,EAAE;MAChB,IAAMC,OAAO,GAAG,sBAAsB,GAAEH,QAAQ,CAACI,MAAM;MACvD,MAAMD,OAAO;IACf;IACA,IAAME,IAAI,SAASL,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOC,aAAa,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/B,CAAC,GAAAE,KAAA,OAAAC,SAAA;AAAA;AASD,gBAAsBkB,YAAYA,CAAAC,GAAA,EAAAC,GAAA;EAAA,QAAAC,aAAA,GAAAA,aAAA,IAAA/B,iBAAA,CAA3B,WAA4BC,MAAa,EAAC+B,OAAc,EAAe;IAC5E,IAAM9B,QAAQ,SAASC,KAAK,CAACP,OAAO,GAAC,SAAS,GAACoC,OAAO,GAAC,UAAU,GAAC/B,MAAM,EAAE;MACxEsB,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAACrB,QAAQ,CAACE,EAAE,EAAE;MAChB,IAAMC,OAAO,GAAG,sBAAsB,GAAEH,QAAQ,CAACI,MAAM;MACvD,MAAMD,OAAO;IACf;IACA,IAAME,IAAI,SAASL,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOC,aAAa,CAACD,IAAI,CAAC;EAC5B,CAAC,GAAAE,KAAA,OAAAC,SAAA;AAAA;AAQD,SAASF,aAAaA,CAACN,QAAY,EAAM;EACvC,IAAIA,QAAQ,CAACI,MAAM,IAAE,SAAS,EAAE;IAC9B,MAAMJ,QAAQ,CAACG,OAAO;EACxB,CAAC,MACI,IAAIH,QAAQ,CAAC+B,IAAI,EAAE;IACtB,OAAO/B,QAAQ,CAAC+B,IAAI;EACtB,CAAC,MACI;IACH,OAAO/B,QAAQ;EACjB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}